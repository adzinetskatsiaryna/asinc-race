{"version":3,"sources":["components/Garage/Car/car.module.css","components/Header/header.module.css","app.module.css","components/Icons/icons.module.css","components/Garage/garage.module.css","redux/garage-reducer.tsx","redux/winners-reducer.tsx","redux/redux-store.tsx","components/Header/header.tsx","components/Icons/Icons.tsx","components/utils.tsx","components/Garage/Car/Car.tsx","components/Garage/ClassGarage.tsx","components/Garage/GarageContainer.tsx","assets/up-arrow.svg","assets/down-arrow.svg","components/Winners/Winners.tsx","components/Winners/WinnersContainer.tsx","App.tsx","index.tsx","components/Winners/Winners.module.css"],"names":["module","exports","SET_CARS","ADD_CAR","CREATE_CAR_NAME","CREATE_COLOR","GENERATE_RANDOM_CARS","REMOVE_CAR","SET_CURRENT_PAGE","SET_TOTAL_CARS_COUNT","UPDATE_CAR","SET_WINDOW_WIDTH","SET_POSITION","initialState","carsInGarage","pageSize","totalCount","currentPage","windowWidth","newCar","color","name","allWinners","SET_WINNERS","SET_TOTAL_COUNT_WINNER","ADD_WINNER","SET_CURRENT_PAGE_WINNER","UPDATE_WINS","addWinnerAC","newWinner","type","apdateWinsAC","newWins","reducers","combineReducers","garage","state","action","carName","generatedCars","map","c","id","position","filter","car","carId","winners","store","createStore","window","Header","className","s","nav","to","btnGarage","activeClassName","activeLink","btnWinner","Icons","props","carIcon","style","left","version","xmlns","xmlnsXlink","x","y","viewBox","xmlSpace","width","size","height","fill","d","models","names","getRandomName","model","Math","floor","random","length","getRandomColor","i","getWindowWidth","innerWidth","Car","useState","speed","setSpeed","undefined","distance","setDistance","pos","setPos","timer","setTimer","status","setStatus","setTimeOfRace","useEffect","startDrive","isRace","stopAllDrive","returnOnStart","url","axios","patch","then","res","data","velocity","returnSpeed","setInterval","clearInterval","console","log","timeOfRace","toFixed","getWinner","generalBtns","onClick","update","remove","road","carInterface","controlPanel","startEngine","disabled","stopEngine","carImage","flag","GarageNew","newCarElementName","React","createRef","newCarElementColor","updateCarColor","updateCarName","winner","time","wins","isFinished","onPageChanged","setCurrentPage","get","getCars","createNewCarAndAddToGarage","current","value","post","onCarNameChange","text","setState","onColorChange","onGenerateNewArray","promises","push","forEach","pr","Promise","all","deleteCar","delete","removeCar","onCarUpdate","put","updateName","updateColor","selectCar","onStartRaceClick","onStopClick","setRace","race","setFinish","getBestTimeAndShowWinner","winnerInBD","find","w","addWinner","bestTime","updateWins","this","carsArray","headers","setTotalCarsCount","setCars","pagesCount","ceil","pages","showWins","showWinnerPopup","garageView","form","input","ref","onChange","btn","raceControls","raceBtn","resetBtn","generatorBtn","raceContainer","isEngineStart","pagination","p","selectedPage","Component","GarageContainer","connect","dispatch","setCarsAC","createCar","addCarActionCreator","generateRandomCars","generateRandomCarsActionCreator","updateColorActionCreator","pageNumber","setTotalsCarsCountAC","updateCar","updateCarAC","setWindowWidth","setWindowWidthAC","Winners","sortingOrder","sortField","getWinners","winnersArray","setTotalCount","setWinners","winnerContainer","onSort","src","upArrow","alt","arrow","downArrow","carPlace","carWinnerImage","setWinnersAC","setTotalCountAC","apdateWin","App","application","mainContainer","path","render","WinnersContainer","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e364c6cd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"flag\":\"car_flag__Y4nlK\",\"road\":\"car_road__2eFLv\",\"carInterface\":\"car_carInterface__paCd0\",\"resultSpan\":\"car_resultSpan__1kPZO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"header_nav__14S_y\",\"btnGarage\":\"header_btnGarage__28tBk\",\"btnWinner\":\"header_btnWinner__2sJvx\",\"activeLink\":\"header_activeLink__2vBnv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"app_mainContainer__3QeFn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"carIcon\":\"icons_carIcon__3zL_J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"garage_selectedPage__dLpQ5\",\"showWinnerPopup\":\"garage_showWinnerPopup__32Qfq\"};","export const SET_CARS = \"SET_CARS\";\r\nexport const ADD_CAR = 'ADD-CAR';\r\nexport const CREATE_CAR_NAME = 'UPDATE-CAR-NAME';\r\nexport const CREATE_COLOR = \"UPDATE-COLOR\";\r\nexport const GENERATE_RANDOM_CARS = \"GENERATE_RANDOM_CARS\";\r\nexport const REMOVE_CAR = \"REMOVE_CAR\";\r\nexport const UPDATE_CAR_COLOR = \"UPDATE_CAR_COLOR\";\r\nexport const SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nexport const SET_TOTAL_CARS_COUNT = \"SET_TOTAL_CARS_COUNT\";\r\nexport const DELETE_CAR=\"DELETE_CAR\";\r\nexport const UPDATE_CAR=\"UPDATE_CAR\";\r\nexport const SET_WINDOW_WIDTH=\"SET_WINDOW_WIDTH\";\r\nexport const SET_STATUS_AND_SPEED=\"SET_STATUS_AND_SPEED\";\r\nexport const SET_POSITION=\"SET_POSITION\";\r\n\r\nexport const addCarActionCreator = (newCar: CarInterface) => {\r\n    return {type: ADD_CAR, newCar} as const;\r\n} \r\nexport const setPositionAC=(position:number, id: number)=>{\r\n    return{type:SET_POSITION,position, id} as const\r\n}\r\n\r\nexport const removeCarActionCreator = (id: number) => {\r\n    return {type: REMOVE_CAR, carId: id} as const\r\n}\r\nexport const createCarNameActionCreator = (carName: string) => {\r\n    return {type: CREATE_CAR_NAME, carName: carName} as const\r\n}\r\nexport const updateColorActionCreator = (color: string) => {\r\n    return {type: CREATE_COLOR, color: color} as const\r\n}\r\nexport const generateRandomCarsActionCreator = (generatedCars: Array<CarInterface>) => {\r\n    return {type: GENERATE_RANDOM_CARS,generatedCars:generatedCars} as const;\r\n}\r\n\r\nexport const setCarsAC = ( carsInGarage: Array<CarInterface>) => {\r\n    return {type: SET_CARS,  carsInGarage} as const\r\n}\r\nexport const setCurrentPageAC = (currentPage: number) => {\r\n    return {type: SET_CURRENT_PAGE, currentPage: currentPage} as const\r\n}\r\nexport const setTotalsCarsCountAC = (totalCount: number) => {\r\n    return {type: SET_TOTAL_CARS_COUNT, totalCount: totalCount} as const\r\n}\r\nexport const updateCarAC=(newCar:CarInterface)=>{\r\n    return{ type:UPDATE_CAR, newCar} as const\r\n}\r\n\r\nexport const setWindowWidthAC=(windowWidth:number)=>{\r\n    return {type:SET_WINDOW_WIDTH,windowWidth} as const\r\n}\r\n\r\n\r\nexport const setStatusAndSpeedAC=(speed:number,status:string)=>{\r\n    return{type:SET_STATUS_AND_SPEED, speed,status} as const\r\n}\r\n\r\ntype ActionType = \r\n| ReturnType<typeof addCarActionCreator>\r\n| ReturnType<typeof setPositionAC>\r\n| ReturnType<typeof removeCarActionCreator >\r\n| ReturnType<typeof createCarNameActionCreator>\r\n| ReturnType<typeof updateColorActionCreator>\r\n| ReturnType<typeof generateRandomCarsActionCreator>\r\n| ReturnType<typeof setCarsAC>\r\n| ReturnType<typeof setCurrentPageAC>\r\n| ReturnType<typeof setTotalsCarsCountAC>\r\n| ReturnType<typeof updateCarAC>\r\n| ReturnType<typeof setWindowWidthAC>\r\n| ReturnType<typeof setStatusAndSpeedAC>\r\n\r\ntype NewCarType = {\r\n    color: string\r\n    name: string\r\n}\r\nexport type StatusCar = 'started' | 'stopped' | 'drive' | 'finished' | 'start'\r\n\r\nexport type CarInterface = {\r\n    name: string;\r\n    color: string;\r\n    id: number;\r\n    position: number;\r\n    status: StatusCar;\r\n    time?: number | undefined;\r\n    isEngineStart: boolean;\r\n    remove: (id: number) => void;\r\n    update: (id: number) => void;\r\n    getWinner: (id: number, name: string, time: number, color: string) => void;\r\n}\r\n\r\ntype InitialStateType={\r\n    carsInGarage:Array<CarInterface>,\r\n    pageSize:number,\r\n    totalCount: number,\r\n    currentPage:number,\r\n    windowWidth:number,\r\n    newCar: NewCarType\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    carsInGarage: [],\r\n    pageSize: 7,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n    windowWidth:0,\r\n    newCar: {\r\n        color: '',\r\n        name: '',\r\n    }\r\n}\r\n\r\nexport const garageReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case  SET_CARS: {\r\n            return {\r\n                ...state,\r\n                //carsInGarage: action.carsInGarage\r\n                carsInGarage: action.carsInGarage\r\n            }\r\n        }\r\n        case ADD_CAR: {\r\n            return {\r\n                ...state,\r\n                carsInGarage: [...state.carsInGarage, action.newCar]\r\n            }\r\n        }\r\n\r\n        case CREATE_CAR_NAME:\r\n            return {\r\n                ...state,\r\n                newCar: {\r\n                    ...state.newCar,\r\n                    name: action.carName\r\n                }\r\n                \r\n            }\r\n\r\n\r\n        case CREATE_COLOR: {\r\n            return {\r\n                ...state,\r\n                newCar: {\r\n                    ...state.newCar,\r\n                    color: action.color\r\n                }\r\n            }\r\n        }\r\n\r\n        case GENERATE_RANDOM_CARS: {\r\n            return {\r\n                ...state,\r\n                carsInGarage: [...state.carsInGarage, ...action.generatedCars]\r\n            }\r\n        }\r\n\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case SET_TOTAL_CARS_COUNT:\r\n            return {\r\n                ...state,\r\n                totalCount: action.totalCount\r\n            }\r\n        case UPDATE_CAR:{\r\n            return {\r\n                ...state\r\n            }\r\n        }\r\n        case SET_WINDOW_WIDTH:\r\n            return {\r\n                ...state,\r\n                windowWidth: action.windowWidth\r\n            }\r\n        case SET_POSITION: {\r\n        \r\n            return {\r\n                ...state,\r\n                carsInGarage:state.carsInGarage.map(c=>c.id===action.id ? {...c, position: action.position}: c)\r\n            }\r\n        }\r\n            \r\n        case REMOVE_CAR:\r\n            return {\r\n                ...state,\r\n                carsInGarage:state.carsInGarage.filter(\r\n                    car=>car.id!==action.carId\r\n                )\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n\r\n","import {IWinner} from \"../components/Winners/Winners\";\r\n\r\nexport type winnersInitialState={\r\n    allWinners:Array<IWinner>,\r\n    totalCount:number,\r\n    pageSize:number,\r\n    currentPage: number,\r\n}\r\n\r\nlet initialState: winnersInitialState = {\r\n    allWinners:[],\r\n    totalCount:0,\r\n    pageSize: 10,\r\n    currentPage: 1,\r\n}\r\n\r\nexport const SET_WINNERS = \"SET_WINNERS\";\r\nexport const SET_TOTAL_COUNT_WINNER=' SET_TOTAL_COUNT_WINNER';\r\nexport const ADD_WINNER='ADD_WINNER';\r\nexport const SET_CURRENT_PAGE_WINNER=\"SET_CURRENT_PAGE_WINNER\"\r\nexport const UPDATE_WINS = \"UPDATE_WINS\"\r\n\r\nexport const setWinnersAC=(allWinners:Array<IWinner>)=>{\r\n    return{ type:SET_WINNERS,allWinners} as const\r\n}\r\nexport  const setTotalCountAC=(totalCount:number)=>{\r\n    return{type:SET_TOTAL_COUNT_WINNER,totalCount } as const\r\n}\r\nexport const  addWinnerAC=(newWinner:IWinner)=>{\r\n    return {type:ADD_WINNER, newWinner} as const\r\n}\r\nexport const setCurrentPageAC=(currentPage:number)=>{\r\n    return { type:SET_CURRENT_PAGE_WINNER,currentPage:currentPage} as const\r\n}\r\nexport const apdateWinsAC = (newWins: IWinner)=>{\r\n    return {type: UPDATE_WINS, newWins} as const\r\n}\r\n\r\ntype ActionType = \r\n| ReturnType<typeof setWinnersAC>\r\n| ReturnType<typeof setTotalCountAC>\r\n| ReturnType<typeof addWinnerAC>\r\n| ReturnType<typeof setCurrentPageAC>\r\n| ReturnType<typeof apdateWinsAC>\r\n\r\n\r\n\r\nexport const winnersReducer=(state:winnersInitialState=initialState,action: ActionType): winnersInitialState=>{\r\n    switch (action.type) {\r\n        case SET_WINNERS: {\r\n            \r\n            return {\r\n                ...state,\r\n                allWinners: action.allWinners\r\n            }\r\n        }\r\n        case SET_TOTAL_COUNT_WINNER:\r\n           \r\n            return {\r\n                ...state,\r\n                totalCount:action.totalCount\r\n            }\r\n        case ADD_WINNER:{\r\n          \r\n            return {\r\n                ...state,\r\n                allWinners: [...state.allWinners, action.newWinner],\r\n\r\n            }\r\n        }\r\n        case SET_CURRENT_PAGE_WINNER:\r\n            return {\r\n                ...state,\r\n                currentPage:action.currentPage\r\n            }\r\n        case UPDATE_WINS:\r\n                return {\r\n                    ...state,\r\n                    //allWinners: [...state.allWinners, action.newWins]\r\n                }    \r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {garageReducer} from \"./garage-reducer\";\r\nimport {winnersReducer} from \"./winners-reducer\";\r\n\r\n\r\n\r\n\r\nconst reducers = combineReducers({\r\n    garage: garageReducer,\r\n    winners: winnersReducer\r\n});\r\nexport type ReducerAppType = ReturnType<typeof reducers>\r\n\r\n\r\nconst store = createStore(reducers);\r\nexport default store;\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n\r\n","//@ts-ignore\r\nimport s from './header.module.css';\r\nimport React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype ButtonsType={\r\n\r\n}\r\n\r\nexport const Header:React.FC<ButtonsType>=()=> {\r\n    return (\r\n        <div className=\"header\">\r\n            <header>\r\n                <div className={s.nav}>\r\n                    <NavLink to=\"/garage\" className={s.btnGarage} activeClassName={s.activeLink}>to Garage </NavLink>\r\n                    <NavLink to=\"/winner\" className={s.btnWinner} activeClassName={s.activeLink}>to Winner </NavLink>\r\n                </div>\r\n            </header>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport s from './icons.module.css';\r\n\r\nexport type PropsIconsType = {\r\n    position?: number | undefined\r\n    name: string\r\n    className: string\r\n    size: string\r\n    color: string\r\n}\r\n\r\nexport  const Icons =(props: PropsIconsType) => {\r\n    return(\r\n        <div className={s.carIcon} style={{left:`${props.position}px`}}>\r\n            <svg version=\"1.1\" id=\"Capa_1\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n                viewBox=\"0 0 20.07 20.07\"\r\n                xmlSpace=\"preserve\"\r\n                className={`icon icon-${props.name} ${props.className}`}\r\n                width={props.size}\r\n                height={props.size}>\r\n                <g>\r\n                    <path style={{fill:`${props.color}`}} d=\"M20.07,10.102c0,0-0.719-1.593-5.363-1.53c0,0-4.626-4.644-13.986,0.582\r\n                    c0,0,0.205,1.018-0.566,1.018c-0.159,0.765-0.322,1.769,0.203,2.294c1.146,0,1.257,0,1.266,0c-0.028-0.123-0.044-0.25-0.044-0.381\r\n                    c0-0.951,0.771-1.722,1.722-1.722s1.722,0.771,1.722,1.722c0,0.131-0.016,0.258-0.044,0.381h0.268h8.357h1.119\r\n                    c-0.027-0.123-0.043-0.25-0.043-0.381c0-0.951,0.771-1.722,1.721-1.722c1.297,0,2.037,1.318,1.906,2.092l1.762-0.182\r\n                    C19.801,10.687,20.07,10.102,20.07,10.102z M6.936,8.835H2.829c0,0,1.703-0.798,4.107-1.261V8.835z M7.827,8.835V7.427\r\n                    c3.442-0.498,6.143,1.408,6.143,1.408H7.827z\"/>\r\n                    <path style={{fill:\"#030104\"}} d=\"M16.402,10.742c-0.734,0-1.33,0.595-1.33,1.33c0,0.733,0.596,1.329,1.33,1.329\r\n                    s1.514-0.596,1.514-1.329C17.916,11.336,17.137,10.742,16.402,10.742z M16.402,12.582c-0.283,0-0.512-0.229-0.512-0.511\r\n                    s0.229-0.512,0.512-0.512c0.281,0,0.512,0.229,0.512,0.512C16.914,12.353,16.683,12.582,16.402,12.582z\"/>\r\n                    <path style={{fill:'#030104'}} d=\"M3.268,10.742c-0.734,0-1.329,0.595-1.329,1.33c0,0.733,0.595,1.329,1.329,1.329\r\n                    c0.735,0,1.33-0.596,1.33-1.329C4.597,11.336,4.003,10.742,3.268,10.742z M3.268,12.582c-0.282,0-0.512-0.229-0.512-0.511\r\n                    s0.23-0.512,0.512-0.512s0.512,0.229,0.512,0.512C3.78,12.353,3.55,12.582,3.268,12.582z\"/>\r\n                </g>\r\n            </svg>\r\n        </div>\r\n    )\r\n}\r\n\r\n","\r\nexport const models: Array<string> = [\"Tesla\",\"Mercedes\",\"BMW\",\"Toyota\",\"Zhiguli\",\"Moscvich\",\"Aston Martin\",'Opel',\"Porch\"];\r\n\r\nexport const names: Array<string> = [\"Model 5\",\"CLK\",\"7\",\"Camry\",\"Comby\",\"9\",\"Corsa\",\"DB9\",\"Coyen\"];\r\n\r\nexport const getRandomName = ():string => {\r\n    const model=models[Math.floor(Math.random()*models.length)];\r\n    const name=names[Math.floor(Math.random()*names.length)];\r\n    return `${model} ${name}`;\r\n}\r\n\r\n\r\nexport const getRandomColor = (): string=>{\r\n    const letters='0123456789ABCDEF';\r\n    let color='#';\r\n    for (let i = 0 ; i < 6; i++){\r\n        color += letters[Math.floor(Math.random()*16)];\r\n    }\r\n    return color;\r\n}\r\n\r\nexport const getWindowWidth =(): number=> {\r\n    let innerWidth = window.innerWidth-120;\r\n    return innerWidth\r\n}\r\nexport function generateRandomCar (count:number=100){\r\n    new  Array(count).fill(1).map(_ =>(\r\n        {\r\n         name:getRandomName(),\r\n         color:getRandomColor(),\r\n         id:_.id,\r\n         isEngineStart:false\r\n        }\r\n    ));\r\n}\r\n\r\n","import React, {useEffect, useState} from \"react\";\r\nimport s from './car.module.css';\r\nimport {Icons} from \"../../Icons/Icons\";\r\nimport axios from \"axios\";\r\nimport {getWindowWidth} from \"../../utils\";\r\nimport { StatusCar } from \"../../../redux/garage-reducer\";\r\n\r\n\r\n\r\nexport type CarInterfaceProps = {\r\n    name: string,\r\n    color: string,\r\n    id: number,\r\n    position:number,\r\n    status: StatusCar,\r\n    time?:number,\r\n    isEngineStart: boolean,  \r\n    remove: (id: number) => void,\r\n    update: (id: number) => void,\r\n    getWinner:(id:number, name:string,time:number, color: string)=>void\r\n    isFinished: boolean\r\n    setFinish: (status: boolean)=>void\r\n    isRace: boolean\r\n}\r\n\r\nexport const Car: React.FC<CarInterfaceProps> = (props) => {\r\n    const [speed, setSpeed] = useState <number>(0);\r\n    const [distance, setDistance] = useState<number | undefined>(undefined);\r\n    const [pos, setPos] = useState<number>(40);\r\n    const [timer, setTimer] = useState<number>(0);\r\n    const [status, setStatus] = useState<StatusCar>('started');\r\n    const [timeOfRace,setTimeOfRace]=useState<number>(0);\r\n\r\n\r\n    const removeCarFromGarage = (id: number) => {\r\n        props.remove(id)\r\n    }\r\n\r\n    const selectCarToUpdate = (id: number) => {\r\n        props.update(id)\r\n    }\r\n\r\n    useEffect(()=>{\r\n     if (status===\"started\" && props.status===\"drive\"){\r\n      startDrive()\r\n     }\r\n     if((status ==='started'||status ===\"drive\") && props.status === \"finished\" && props.isRace ){\r\n      stopAllDrive()\r\n     }\r\n     if(status === \"stopped\" && props.status === \"started\"){\r\n     returnOnStart()\r\n     }\r\n    },[props.status, status])\r\n\r\n\r\n    const getRace = (id: number) => {\r\n       \r\n        return axios.patch(`http://127.0.0.1:3000/engine?id=${id}&status=started`).then(res => {\r\n            let speed = (res.data.velocity / 3);\r\n            let distance = getWindowWidth();\r\n            setSpeed(speed);\r\n            setDistance(distance);\r\n            setStatus('started');\r\n            setPos(40)\r\n            return speed;\r\n        });\r\n\r\n    }\r\n\r\n    const startDrive = () => { \r\n       \r\n        const url = `http://127.0.0.1:3000/engine?id=${props.id}&status=drive`;\r\n        getRace(props.id).then(returnSpeed => {\r\n            axios.patch(url)\r\n                .then(res => {\r\n                       let timer = +setInterval(() => {\r\n                        setPos(pos => pos + +returnSpeed)\r\n                    }, 150);\r\n                    setTimer(timer);\r\n                    setStatus('drive')\r\n                })\r\n        });\r\n    }\r\n\r\n    const stopDrive = () => {        \r\n        clearInterval(timer);\r\n        setStatus('started')\r\n        axios.patch(`http://127.0.0.1:3000/engine?id=${props.id}&status=started`)\r\n            .then(res => {\r\n                setPos(40);\r\n\r\n            });   \r\n    }\r\n    const stopAllDrive = () => {        \r\n        clearInterval(timer);\r\n        setStatus('stopped')\r\n        axios.patch(`http://127.0.0.1:3000/engine?id=${props.id}&status=stopped`)\r\n            .then(res => {\r\n                console.log(res)\r\n                console.log(props.id)\r\n            });   \r\n    }\r\n\r\n    const returnOnStart = ()=>{\r\n        setStatus(\"started\")\r\n        \r\n        axios.patch(`http://127.0.0.1:3000/engine?id=${props.id}&status=started`)\r\n            .then(res => {\r\n                setPos(40);\r\n            });     \r\n    }\r\n\r\n    if (distance && pos > distance && status !==\"stopped\" ) {\r\n       \r\n        clearInterval(timer);\r\n        axios.patch(`http://127.0.0.1:3000/engine?id=${props.id}&status=stopped`)\r\n            .then(res => {\r\n               let timeOfRace=+(distance / speed).toFixed(2);\r\n                setStatus('stopped');\r\n                setTimeOfRace(timeOfRace);\r\n                if(props.isRace){\r\n                    props.getWinner(props.id,props.name,timeOfRace, props.color);\r\n                }\r\n                  \r\n            });\r\n    }\r\n    \r\n    return (\r\n        \r\n        <>\r\n            <div className={s.generalBtns}>\r\n                <button onClick={() => selectCarToUpdate(props.id)}>Select</button>\r\n                <button onClick={() => {\r\n                    removeCarFromGarage(props.id)\r\n                }}>Remove\r\n                </button>\r\n            </div>\r\n            <span className={s.carName}>{props.name}</span>\r\n            <div className={s.road}>\r\n                <div className={s.carInterface}>\r\n                    <div className={s.controlPanel}>\r\n                        <button className={s.startEngine}\r\n                                onClick={startDrive}\r\n                                disabled={status === \"drive\" || status==='stopped'? true : false}\r\n                        >A</button>\r\n                        \r\n                        <button className={s.stopEngine}\r\n                                disabled={ status === \"started\"  ? true : false}\r\n                                onClick={() => stopDrive()}\r\n                        >B</button>\r\n                    </div>\r\n                    <Icons name={s.carImage}\r\n                           color={props.color}\r\n                           size='55'\r\n                           className='carImage'\r\n                           position={pos}\r\n                    />\r\n                </div>\r\n                <div className={s.flag}></div>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n","import React from \"react\";\r\nimport s from \"./garage.module.css\";\r\nimport axios, { AxiosResponse } from \"axios\";\r\nimport {Car} from \"./Car/Car\";\r\nimport {getRandomColor, getRandomName, getWindowWidth} from \"../utils\";\r\nimport { IWinner } from \"../Winners/Winners\";\r\nimport { MDTPGarageContainer, MSTPGarageContainer } from \"./GarageContainer\";\r\nimport { CarInterface, StatusCar } from \"../../redux/garage-reducer\";\r\n\r\ntype PropsType = MSTPGarageContainer & MDTPGarageContainer\r\n\r\n\r\ntype StateType = {\r\n    newCar: {\r\n        name?: string | undefined | null\r\n        color?: string | undefined | null\r\n        id: number\r\n    }\r\n    timer: number\r\n    position: 40\r\n    speed: number\r\n    status: StatusCar\r\n    distance: number\r\n    winner: {\r\n        id: number,\r\n        name: string,\r\n        time: number,\r\n        wins: number,\r\n        color: string\r\n    }\r\n    isFinished: boolean\r\n    isRace: boolean\r\n}\r\nclass GarageNew extends React.Component<PropsType, StateType> {\r\n    newCarElementName: React.RefObject<HTMLInputElement> = React.createRef();\r\n    newCarElementColor: React.RefObject<HTMLInputElement> = React.createRef();\r\n    updateCarColor: React.RefObject<HTMLInputElement> = React.createRef();\r\n    updateCarName: React.RefObject<HTMLInputElement> = React.createRef();\r\n\r\n    state: StateType = {\r\n        newCar: {\r\n            name: \"\",\r\n            color: \"\",\r\n            id: 0\r\n        },\r\n        timer:0,\r\n        position:40,\r\n        speed:0,\r\n        status:\"start\" as StatusCar,\r\n        distance:getWindowWidth(),\r\n        winner:{\r\n            id:0,\r\n            name:\"\",\r\n            time:0,\r\n            wins: 1,\r\n            color: \"\"\r\n\r\n        },\r\n        isFinished:false,\r\n        isRace: false\r\n    }\r\n\r\n\r\n   getCars() {\r\n       axios.get(`http://localhost:3000/garage?_page=${this.props.currentPage}&_limit=7`)\r\n           .then(res => {\r\n               let carsArray = res.data;\r\n               let totalCount = res.headers[`x-total-count`];\r\n               this.props.setTotalCarsCount(totalCount)\r\n               this.props.setCars(carsArray);\r\n           })\r\n   }\r\n\r\n    componentDidMount(): void {\r\n        this.getCars();\r\n    }\r\n\r\n    onPageChanged = (currentPage: number) => {\r\n       \r\n        this.props.setCurrentPage(currentPage);\r\n        axios.get(`http://localhost:3000/garage?_page=${currentPage}&_limit=7`)\r\n            .then(res => {\r\n                this.getCars()\r\n            })\r\n    }\r\n\r\n    createNewCarAndAddToGarage = () => {\r\n        const name = this.newCarElementName.current && this.newCarElementName.current.value;\r\n        const color = this.newCarElementColor.current && this.newCarElementColor.current.value;\r\n        axios.post(`http://localhost:3000/garage`,\r\n            {\r\n                name,\r\n                color\r\n            }).then(res => {\r\n               this.getCars()\r\n        });\r\n    };\r\n\r\n    onCarNameChange = () => {\r\n        if (this.newCarElementName.current) {\r\n            let text = this.newCarElementName.current.value;\r\n            this.setState({\r\n                newCar: {\r\n                    ...this.state.newCar,\r\n                    name: text\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    onColorChange = () => {\r\n        if (this.newCarElementColor.current) {\r\n            let color = this.newCarElementColor.current?.value;\r\n            this.setState({\r\n                newCar: {\r\n                    ...this.state.newCar,\r\n                    color: color\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    onGenerateNewArray=()=>{\r\n        const generatedCars = [];\r\n        const promises: Promise<AxiosResponse<CarInterface>>[] = []\r\n        for (let i = 0; i < 100; i++) {\r\n            generatedCars.push({\r\n                name: getRandomName(),\r\n                color: getRandomColor(),\r\n            })\r\n        }\r\n       \r\n        generatedCars.forEach(car => {\r\n            let pr = axios.post(`http://127.0.0.1:3000/garage`, car)\r\n            promises.push(pr)\r\n                \r\n        })\r\n        Promise.all(promises).then( (res)=> {    \r\n            this.getCars();\r\n        } )\r\n\r\n    }\r\n\r\n    deleteCar = (id: number) => {\r\n        axios.delete(`http://127.0.0.1:3000/garage/${id}`)\r\n            .then(res => {\r\n                this.props.removeCar(id)\r\n                this.getCars()\r\n            });\r\n        axios.delete(`http://127.0.0.1:3000/winners/${id}`)\r\n            .then(res=>{\r\n                \r\n            })\r\n    }\r\n\r\n    onCarUpdate = () => {\r\n        let name = this.updateCarName.current && this.updateCarName.current.value;\r\n        let color = this.updateCarColor.current && this.updateCarColor.current.value;\r\n        axios.put(`http://127.0.0.1:3000/garage/${this.state.newCar.id}`, {\r\n            name,\r\n            color\r\n        }).then(res => {\r\n            this.getCars()\r\n        })\r\n    }\r\n\r\n    updateName = () => {\r\n        this.setState({\r\n            newCar: {\r\n                ...this.state.newCar,\r\n                name: this.updateCarName.current && this.updateCarName.current.value\r\n            }\r\n        })\r\n    }\r\n\r\n    updateColor = () => {\r\n        this.setState({\r\n            newCar: {\r\n                ...this.state.newCar,\r\n                color: this.updateCarColor.current && this.updateCarColor.current.value\r\n            }\r\n        })\r\n    }\r\n\r\n    selectCar = (id: number) => {\r\n        axios.get(`http://127.0.0.1:3000/garage/${id}`).then(res => {\r\n                let name = res.data.name;\r\n                let color = res.data.color;\r\n                this.setState({\r\n                    newCar: {\r\n                        name: name,\r\n                        color: color,\r\n                        id\r\n                    }\r\n                });\r\n                if (this.updateCarName.current) this.updateCarName.current.value = name;\r\n                if(this.updateCarColor.current)this.updateCarColor.current.value=color;\r\n            }\r\n        )\r\n    }\r\n\r\n    onStartRaceClick=()=>{\r\n        this.setState({\r\n            status:\"drive\",\r\n            isRace: true\r\n        })\r\n    }\r\n\r\n    onStopClick=()=>{\r\n        this.setState({\r\n            status: \"started\",\r\n            position:40,\r\n            isFinished:false,\r\n            isRace: false\r\n        })\r\n    }\r\n\r\n    setRace=(race: boolean)=>{\r\n        this.setState(\r\n            {\r\n                isRace: race\r\n            }\r\n        )\r\n    }\r\n    setFinish=(status: boolean)=>{\r\n        this.setState(\r\n            {\r\n                isFinished:status\r\n            }\r\n        )\r\n    }\r\n\r\n    getBestTimeAndShowWinner=(id:number,name:string,time:number, color: string)=>{\r\n      \r\n      const winnerInBD=  this.props.allWinners.find((w:IWinner) =>w.id === id)\r\n     \r\n      if(typeof winnerInBD === \"undefined\"){\r\n        const newWinner = {\r\n            id:id,\r\n            name:name,\r\n            time:time,\r\n            wins: 1,\r\n            color: color\r\n          }\r\n                this.setState({\r\n                    winner:newWinner,\r\n                    isFinished:true,\r\n                    status:\"finished\"\r\n                })\r\n            axios.post(`http://127.0.0.1:3000/winners`,\r\n            {\r\n                id: id,\r\n                name: name,\r\n                time: time,\r\n                wins: 1,\r\n                color: color\r\n            }).then(res => {\r\n            \r\n            this.props.addWinner({...this.state.winner})\r\n        });\r\n      } else {\r\n        const bestTime : number = time > winnerInBD.time ? winnerInBD.time : time\r\n        // const newWinner: IWinner = {}\r\n       \r\n        this.setState({\r\n            winner: {\r\n                id: winnerInBD.id, \r\n                name: winnerInBD.name , \r\n                time: time, \r\n                wins: winnerInBD.wins + 1, \r\n                color: winnerInBD.color\r\n            },\r\n            isFinished:true,\r\n            status:\"finished\"\r\n        })\r\n          axios.put(`http://127.0.0.1:3000/winners/${id}`,\r\n         \r\n    {\r\n        id: id,\r\n        name: name,\r\n        time: bestTime,  \r\n        wins: winnerInBD.wins + 1,\r\n        color: color\r\n    }).then(res => {\r\n    \r\n    this.props.updateWins({...this.state.winner})\r\n }); }\r\n        \r\n    }\r\n\r\n    render(): React.ReactElement<any, string | React.JSXElementConstructor<any>> | string | number | {} | React.ReactNodeArray | React.ReactPortal | boolean | null | undefined {\r\n        let pagesCount = Math.ceil(this.props.totalCount / this.props.pageSize);\r\n        let pages = [];\r\n        for (let i = 1; i <= pagesCount; i++) {\r\n            pages.push(i)\r\n        }\r\n       \r\n        const showWins = this.state.isFinished && this.state.isRace  ? <div className={s.showWinnerPopup}> the {this.state.winner.name} wins  with the time: {this.state.winner.time} sec </div> : ''\r\n          \r\n        return (\r\n            <div className={s.garageView}>\r\n                <div>\r\n                    <div className={s.form}>\r\n                        <input className={s.input}\r\n                               ref={this.newCarElementName}\r\n                               id=\"create-name\" type=\"text\"\r\n                               onChange={this.onCarNameChange}\r\n                        />\r\n                        <input className={s.color}\r\n                               ref={this.newCarElementColor}\r\n                               id=\"create-color\" type=\"color\"\r\n                               onChange={this.onColorChange}\r\n                        />\r\n                        <button className={s.btn}\r\n                                onClick={this.createNewCarAndAddToGarage}\r\n                        >Create\r\n                        </button>\r\n                    </div>\r\n                    <div>\r\n                        <input className={s.input}\r\n                              ref={this.updateCarName}\r\n                               onChange={this.updateName} type=\"text\"/>\r\n                        <input className={s.color}\r\n                              ref={this.updateCarColor}\r\n                               id=\"update-color\" type=\"color\"\r\n                            onChange={this.updateColor}\r\n                        />\r\n                        <button className={s.btn}\r\n                                onClick={this.onCarUpdate}\r\n                        >Update\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className={s.raceControls}>\r\n                    <button className={s.raceBtn}\r\n                            onClick={this.onStartRaceClick}\r\n                    >Race</button>\r\n                    <button className={s.resetBtn}\r\n                            onClick={this.onStopClick}\r\n                    >\r\n                    Reset</button>\r\n                    <button className={s.generatorBtn}\r\n                            onClick={this.onGenerateNewArray}\r\n                    >Generate\r\n                    </button>\r\n                </div>\r\n                <div className={s.garage}>\r\n                    {showWins}\r\n                    <h1>Garage: # {this.props.totalCount}</h1>\r\n                    <h2> page: {this.props.currentPage}</h2>\r\n                    <div className={s.raceContainer}>\r\n                        {this.props.carsInGarage.map((car) => { return <Car \r\n                            name={car.name} \r\n                            color={car.color} \r\n                            id={car.id} \r\n                            isEngineStart={car.isEngineStart}\r\n                            key={car.id}\r\n                            remove={this.deleteCar} \r\n                            update={this.selectCar}\r\n                            position={this.state.position}\r\n                            status={this.state.status}\r\n                            getWinner={this.getBestTimeAndShowWinner}\r\n                            isFinished = {this.state.isFinished}\r\n                            setFinish = {this.setFinish}\r\n                            isRace={this.state.isRace}\r\n                            />\r\n                         }\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                <div className={s.pagination}>\r\n                    {pages.map((p,i )=> {\r\n                        return <button key={i}\r\n                            className={this.props.currentPage === p ? s.selectedPage:\"\"}\r\n                                       onClick={()=>this.onPageChanged(p)}\r\n                        >{p}</button>\r\n                    })}\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GarageNew;\r\n\r\n\r\n","\r\nimport  {Dispatch} from \"react\";\r\n\r\nimport {\r\n    addCarActionCreator,\r\n    CarInterface,\r\n    generateRandomCarsActionCreator, removeCarActionCreator,\r\n    setCarsAC,\r\n    setCurrentPageAC,\r\n    setTotalsCarsCountAC, setWindowWidthAC, updateCarAC,\r\n    updateColorActionCreator\r\n} from \"../../redux/garage-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport GarageNew from \"./ClassGarage\";\r\nimport { Action } from \"redux\";\r\nimport { addWinnerAC, apdateWinsAC } from \"../../redux/winners-reducer\";\r\nimport { ReducerAppType} from \"../../redux/redux-store\";\r\nimport  {IWinner} from \"../Winners/Winners\";\r\n\r\n\r\nexport type MSTPGarageContainer = {\r\n    carsInGarage: Array<CarInterface>\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage:number\r\n    windowWidth:number\r\n    allWinners: Array<IWinner>\r\n}\r\n\r\nlet mapStateToProps=(state: ReducerAppType): MSTPGarageContainer => {\r\n    return {\r\n        carsInGarage:state.garage.carsInGarage,\r\n        pageSize:state.garage.pageSize,\r\n        totalCount:state.garage.totalCount,\r\n        currentPage:state.garage.currentPage,\r\n        windowWidth: state.garage.windowWidth,\r\n        allWinners:state.winners.allWinners,\r\n    }\r\n}\r\n\r\nexport type MDTPGarageContainer = {\r\n    setCars:( carsInGarage: Array<CarInterface>) => void\r\n    createCar:(newCar: CarInterface)=> void\r\n    generateRandomCars:(generatedCars:Array<CarInterface>)=>void\r\n    updateCarColor:(name:string,color:string)=>void\r\n    setCurrentPage:(pageNumber:number)=>void\r\n    setTotalCarsCount:(totalCount:number)=>void\r\n    updateCar:(newCar: CarInterface)=>void\r\n    setWindowWidth:(windowWidth:number)=>void\r\n    removeCar:(carId:number)=>void\r\n    addWinner: (winner: IWinner)=>void\r\n    updateWins: (newWins: IWinner)=>void\r\n\r\n}\r\n\r\nlet mapDispatchToProps=(dispatch:Dispatch<Action>): MDTPGarageContainer => {\r\n    return{\r\n        setCars:( carsInGarage: Array<CarInterface>)=>{\r\n            dispatch(setCarsAC( carsInGarage))\r\n        },\r\n\r\n       createCar:(newCar: CarInterface)=>{\r\n           dispatch(addCarActionCreator(newCar))\r\n       },\r\n        generateRandomCars:(generatedCars:Array<CarInterface>)=>{\r\n            dispatch(generateRandomCarsActionCreator(generatedCars))\r\n        },\r\n        updateCarColor:(name:string,color:string)=>{\r\n           dispatch(updateColorActionCreator(color))\r\n        },\r\n\r\n        setCurrentPage:(pageNumber:number)=>{\r\n            \r\n            dispatch(setCurrentPageAC(pageNumber))\r\n        },\r\n        setTotalCarsCount:(totalCount:number)=>{\r\n            dispatch(setTotalsCarsCountAC(totalCount))\r\n        },\r\n        updateCar:(newCar: CarInterface)=>{\r\n            dispatch(updateCarAC(newCar))\r\n        },\r\n        setWindowWidth:(windowWidth:number)=>{\r\n            dispatch(setWindowWidthAC(windowWidth))\r\n        },\r\n        removeCar:(carId:number)=>{\r\n            dispatch(removeCarActionCreator(carId))\r\n        },\r\n        addWinner: (winner: IWinner)=>{\r\n           dispatch (addWinnerAC(winner))\r\n        },\r\n        updateWins: (newWins: IWinner)=>{\r\n            dispatch(apdateWinsAC(newWins))\r\n        }\r\n    }\r\n}\r\nconst GarageContainer=connect(mapStateToProps,mapDispatchToProps)(GarageNew);\r\n\r\nexport default GarageContainer;\r\n","export default __webpack_public_path__ + \"static/media/up-arrow.89bbc5ac.svg\";","export default __webpack_public_path__ + \"static/media/down-arrow.f16dde91.svg\";","import s from './Winners.module.css';\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\nimport {Icons} from \"../Icons/Icons\";\r\nimport upArrow from '../../assets/up-arrow.svg';\r\nimport downArrow from '../../assets/down-arrow.svg';\r\n\r\n\r\n\r\nexport type IWinner={\r\n    id: number,\r\n    wins: number,\r\n    time: number,\r\n    name:string,\r\n    color:string\r\n}\r\n\r\ntype test = 'id' | 'wins' | 'time'\r\n\r\nexport type StateType = {\r\n    sortingOrder: string\r\n    sortField: string\r\n}\r\n\r\nclass Winners extends React.Component<any, StateType> {\r\n   state : StateType={\r\n        sortingOrder:'DESC',\r\n        sortField:'id'\r\n    }\r\n\r\n    getWinners(){\r\n        axios.get(`http://127.0.0.1:3000/winners?_page=${this.props.currentPage}&_limit=10`)\r\n            .then(res => {\r\n                let winnersArray = res.data;               \r\n                let totalCount = res.headers[`x-total-count`];\r\n                \r\n                this.props.setTotalCount(totalCount)\r\n                this.props.setWinners(winnersArray)    \r\n            });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.getWinners();\r\n    }\r\n\r\n \r\n    onPageChanged = ( currentPage: number) => {\r\n       \r\n        this.props.setCurrentPage( currentPage);\r\n        axios.get(`http://127.0.0.1:3000/winners?_page=${currentPage}&_limit=10`)\r\n            .then(res => {\r\n               this.getWinners();\r\n            })\r\n    }\r\n\r\n    onSort(sortField: test){\r\n        let sortingOrder = this.state.sortingOrder;\r\n\r\n        if(sortingOrder === 'ASC'){\r\n            sortingOrder ='DESC';\r\n            this.setState({sortingOrder: 'DESK'})\r\n        } else {\r\n            sortingOrder = 'ASC'\r\n            this.setState({sortingOrder: 'ASC'})\r\n        }\r\n\r\n         this.setState({sortField});\r\n        axios.get(`http://127.0.0.1:3000/winners?_page=${this.props.currentPage}&_limit=10&_sort=${sortField}&_order=${sortingOrder}`)\r\n        .then(res => {\r\n            this.props.setWinners(res.data)  \r\n        });\r\n    }\r\n\r\n\r\n    render(): React.ReactElement<any, string | React.JSXElementConstructor<any>> | string | number | {} | React.ReactNodeArray | React.ReactPortal | boolean | null | undefined {\r\n        \r\n        let pagesCount = Math.ceil(this.props.totalCount / this.props.pageSize);\r\n        let pages = [];\r\n        for (let i = 1; i <= pagesCount; i++) {\r\n            pages.push(i)\r\n        }\r\n\r\n        const renderWins = () => {\r\n            return this.props.allWinners.allWinners.map((winner: IWinner, i: number) => (\r\n            <tr key={i}>\r\n                <td>{winner.id}</td>\r\n                <td className={s.carPlace}>\r\n                    <Icons  name={s.carImage}\r\n                            color={winner.color}\r\n                            size='40'\r\n                            className={s.carWinnerImage}/>\r\n                </td>\r\n                <td>{winner.name}</td>\r\n                {<td>{winner.wins}</td>}\r\n                {<td>{winner.time}</td>}\r\n            </tr>\r\n        ))\r\n        }\r\n        \r\n\r\n        return (\r\n            <div className={s.garage}>\r\n                <h1>Winners: # {this.props.totalCount}</h1>\r\n                <h2> page: {this.props.currentPage}</h2>\r\n                <div className={s.winnerContainer}>\r\n                    <table>\r\n                        <thead>\r\n                        <tr>\r\n                        <th onClick={()=>this.onSort(\"id\")}>Number{this.state.sortingOrder === 'ASC' && this.state.sortField === \"id\" ? <img src={upArrow} alt=\"arrow\" className={s.arrow} /> : <img src= {downArrow} alt=\"arrow\" className={s.arrow} /> }</th>\r\n                        <th>Car</th>\r\n                        <th>Name</th>\r\n                        <th onClick={()=>this.onSort('wins')}>Wins{this.state.sortingOrder === 'ASC' && this.state.sortField === \"wins\" ? <img src={upArrow} alt=\"arrow\" className={s.arrow} /> : <img src= {downArrow} alt=\"arrow\" className={s.arrow} /> }</th>\r\n                        <th onClick={()=>this.onSort('time')}>Best score{this.state.sortingOrder === 'ASC' && this.state.sortField === \"time\" ? <img src={upArrow} alt=\"arrow\" className={s.arrow} /> : <img src= {downArrow} alt=\"arrow\" className={s.arrow} /> }</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {renderWins()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className={s.pagination}>\r\n                    {pages.map((p, i) => {\r\n                        return <button key={i}\r\n                                       className={this.props.currentPage === p ? s.selectedPage : \"\"}\r\n                                       onClick={()=>this.onPageChanged(p)}\r\n                        >{p}</button>\r\n                    })}\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Winners;\r\n","import {connect} from \"react-redux\";\r\nimport Winners, {IWinner} from \"./Winners\";\r\nimport {Dispatch} from \"react\";\r\nimport { Action } from \"redux\";\r\nimport {addWinnerAC, apdateWinsAC, setCurrentPageAC, setTotalCountAC, setWinnersAC} from \"../../redux/winners-reducer\";\r\nimport { ReducerAppType} from \"../../redux/redux-store\";\r\n\r\nconst mapStateToProps=(state:ReducerAppType)=>{\r\n    return{\r\n        allWinners:state.winners,\r\n        totalCount:state.winners.totalCount,\r\n        pageSize:state.winners.pageSize,\r\n        currentPage:state.winners.currentPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps=(dispatch:Dispatch<Action>)=>{\r\n    \r\n    return{\r\n       setWinners:(allWinners:Array<IWinner>)=>{\r\n            dispatch(setWinnersAC(allWinners))\r\n       },\r\n        setTotalCount:(totalCount:number)=>{\r\n           dispatch(setTotalCountAC(totalCount))\r\n        },\r\n        setCurrentPage:(pageNumber:number)=>{\r\n           dispatch(setCurrentPageAC(pageNumber))\r\n        },\r\n        addWinner:(newWinner:IWinner)=>{\r\n           dispatch(addWinnerAC(newWinner))\r\n        },\r\n        apdateWin: (newWins: IWinner)=>{\r\n            dispatch(apdateWinsAC(newWins))\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst GarageContainer=connect(mapStateToProps,mapDispatchToProps)(Winners);\r\n\r\nexport default GarageContainer;\r\n","import s from './app.module.css';\r\nimport {Header} from \"./components/Header/header\";\r\nimport React from \"react\";\r\nimport { Route} from 'react-router-dom';\r\nimport GarageContainer from \"./components/Garage/GarageContainer\";\r\nimport WinnersContainer from './components/Winners/WinnersContainer';\r\n\r\n\r\nexport const  App:React.FC<{}>=()=>{\r\n\r\n    return (\r\n\r\n          <div className={s.application}>\r\n\r\n              <Header/>\r\n              <div className={s.mainContainer}>\r\n                  <Route path=\"/garage\" render={()=><GarageContainer/>}/>\r\n                  <Route path=\"/winner\" render={()=><WinnersContainer/>}/>\r\n              </div>\r\n          </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport './index.css';\r\nimport store from \"./redux/redux-store\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Winners_selectedPage__A9YTk\",\"carPlace\":\"Winners_carPlace__2LXJA\",\"arrow\":\"Winners_arrow__14mez\"};"],"sourceRoot":""}